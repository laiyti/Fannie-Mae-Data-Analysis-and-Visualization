{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMzJzkdgm5Z3la5qhYe0mrU",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/laiyti/Fannie-Mae-Data-Analysis-and-Visualization/blob/main/Bank%20Marketing%20Classification%20Model\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Load datasets"
      ],
      "metadata": {
        "id": "OCGInkOaLT5q"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "EY2gIlwCeKus"
      },
      "outputs": [],
      "source": [
        "from sklearn.datasets import fetch_openml"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Program sklearn.datasets.fetch_openml() with data_id 1461 to read in the Bank Marketing dataset\n",
        "everything = fetch_openml(data_id=1461)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "721Dgygsfo1h",
        "outputId": "fe002407-90c9-47b6-f860-a90504392994"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/datasets/_openml.py:968: FutureWarning: The default value of `parser` will change from `'liac-arff'` to `'auto'` in 1.4. You can set `parser='auto'` to silence this warning. Therefore, an `ImportError` will be raised from 1.4 if the dataset is dense and pandas is not installed. Note that the pandas parser may return different data types. See the Notes Section in fetch_openml's API doc for details.\n",
            "  warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Read only data and target from openML Bank Marketing Dataset\n",
        "data, target = fetch_openml(data_id=1461, return_X_y = True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rqAxd2atVFlt",
        "outputId": "b755c8b0-cee6-4186-d448-b7a3962488c4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/datasets/_openml.py:968: FutureWarning: The default value of `parser` will change from `'liac-arff'` to `'auto'` in 1.4. You can set `parser='auto'` to silence this warning. Therefore, an `ImportError` will be raised from 1.4 if the dataset is dense and pandas is not installed. Note that the pandas parser may return different data types. See the Notes Section in fetch_openml's API doc for details.\n",
            "  warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Exploratory data analysis (EDA)\n",
        "###### - Perform exploratory data analysis to report at least two seaborn plots"
      ],
      "metadata": {
        "id": "blHeXYCDqJp0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "TAQeVg5HppKM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Visualize report correlations (taught in the class)\n",
        "from seaborn import heatmap\n",
        "\n",
        "corr_map = heatmap(data.corr(), annot = True, cmap = 'rainbow')\n",
        "corr_map.xaxis.tick_top() # move the x-axis title to the top"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 486
        },
        "id": "_S0-7wvem6IK",
        "outputId": "eed2357c-9a73-4e17-914a-be216f514a44"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-28-0443a3ea0e50>:4: FutureWarning: The default value of numeric_only in DataFrame.corr is deprecated. In a future version, it will default to False. Select only valid columns or specify the value of numeric_only to silence this warning.\n",
            "  corr_map = heatmap(data.corr(), annot = True, cmap = 'rainbow')\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Explore the data about the clients education level(V4) with different previous marketing campaign outcome(V16)\n",
        "# filter 'unknown' group for both education and previous marketing outcome\n",
        "filtered_data = data[(data['V4'] != 'unknown') & (data['V16'] != 'unknown')]\n",
        "hue_order = ['primary', 'secondary', 'tertiary']\n",
        "\n",
        "# Create the displot using sns with the filtered data\n",
        "plot = sns.displot(filtered_data, x=\"V16\", hue='V4', hue_order = hue_order , multiple=\"dodge\")\n",
        "legend = plot._legend\n",
        "legend.set_title('Education')\n",
        "\n",
        "# Set x-axis and y-axis labels\n",
        "plt.xlabel('Previous outcome')\n",
        "plt.ylabel('Count')\n",
        "\n",
        "# Show the plot\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 506
        },
        "id": "Ff3kBs5ntrKy",
        "outputId": "cf37bc55-25ff-47ef-9e4f-05af62c49cb1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 622x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Explore the clients's age(V1), jobs(V2) and the previous marketing outcome(V16)\n",
        "# Calculate the mean of age(V1) for each category of job(V2)\n",
        "mean_v1_by_v2 = data.groupby('V2')['V1'].mean()\n",
        "\n",
        "# Get the sorted categories based on the mean of age(V1)\n",
        "sorted_v2_categories = mean_v1_by_v2.sort_values(ascending = False).index\n",
        "\n",
        "# Plot the data with the x-axis categories sorted by the mean of age(V1)\n",
        "plot = sns.catplot(data=data, x=\"V2\", y=\"V1\", hue=\"V16\", kind=\"box\", height=6, aspect=2,\n",
        "            order=sorted_v2_categories, palette=['red', 'gold'])\n",
        "plot._legend.set_title('Previous outcome')\n",
        "\n",
        "plt.xlabel('Job')\n",
        "plt.ylabel('Age')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 678
        },
        "id": "wHtd1Q-E87lg",
        "outputId": "32759189-95cf-41a1-ad5b-adf06126cf37"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-30-8bee626427dd>:9: UserWarning: \n",
            "The palette list has fewer values (2) than needed (4) and will cycle, which may produce an uninterpretable plot.\n",
            "  plot = sns.catplot(data=data, x=\"V2\", y=\"V1\", hue=\"V16\", kind=\"box\", height=6, aspect=2,\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(34.82917824074074, 0.5, 'Age')"
            ]
          },
          "metadata": {},
          "execution_count": 30
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1313x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Data Preparation\n",
        "###### - Apply sklearn.preprocessing.StandardScaler() to fit and transform() the data\n",
        "###### - Program sklearn.model_selection.train_test_split() to partition the normalized data set into (train, validation, test) = (80%, 0%, 20%)"
      ],
      "metadata": {
        "id": "m5QRur1EqGdf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.preprocessing import StandardScaler"
      ],
      "metadata": {
        "id": "MES3HsM6UB3M"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Apply sklearn.preprocessing.StandardScaler() to fit and transform() the data\n",
        "data_numeric = data.select_dtypes(np.number)\n",
        "column_numeric = data_numeric.columns # to keep the column names in data_numeric\n",
        "scaled_data = pd.DataFrame(StandardScaler().fit_transform(data_numeric), columns = column_numeric)\n",
        "# Double check the mean and standard deviation to see if scaled_data is standardize\n",
        "print(f'The means after standardization are as follows: \\n{scaled_data.mean()}')\n",
        "print(f'The standard deviation after standardization are as follows: \\n{scaled_data.std()}')\n",
        "scaled_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 745
        },
        "id": "VRnMqGNaqDk-",
        "outputId": "b7b94bff-82cf-454e-a289-d14dc533cd93"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The means after standardization are as follows: \n",
            "V1     2.112250e-16\n",
            "V6     1.760208e-17\n",
            "V10    1.257292e-17\n",
            "V12    6.035001e-17\n",
            "V13    3.017500e-17\n",
            "V14    2.011667e-17\n",
            "V15    4.023334e-17\n",
            "dtype: float64\n",
            "The standard deviation after standardization are as follows: \n",
            "V1     1.000011\n",
            "V6     1.000011\n",
            "V10    1.000011\n",
            "V12    1.000011\n",
            "V13    1.000011\n",
            "V14    1.000011\n",
            "V15    1.000011\n",
            "dtype: float64\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             V1        V6       V10       V12       V13       V14       V15\n",
              "0      1.606965  0.256419 -1.298476  0.011016 -0.569351 -0.411453 -0.251940\n",
              "1      0.288529 -0.437895 -1.298476 -0.416127 -0.569351 -0.411453 -0.251940\n",
              "2     -0.747384 -0.446762 -1.298476 -0.707361 -0.569351 -0.411453 -0.251940\n",
              "3      0.571051  0.047205 -1.298476 -0.645231 -0.569351 -0.411453 -0.251940\n",
              "4     -0.747384 -0.447091 -1.298476 -0.233620 -0.569351 -0.411453 -0.251940\n",
              "...         ...       ...       ...       ...       ...       ...       ...\n",
              "45206  0.947747 -0.176460  0.143418  2.791329  0.076230 -0.411453 -0.251940\n",
              "45207  2.831227  0.120447  0.143418  0.768224 -0.246560 -0.411453 -0.251940\n",
              "45208  2.925401  1.429593  0.143418  3.373797  0.721811  1.436189  1.050473\n",
              "45209  1.512791 -0.228024  0.143418  0.970146  0.399020 -0.411453 -0.251940\n",
              "45210 -0.370689  0.528364  0.143418  0.399328 -0.246560  1.476138  4.523577\n",
              "\n",
              "[45211 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b49737c5-1a8f-4474-81ab-3a359f994dc9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>V1</th>\n",
              "      <th>V6</th>\n",
              "      <th>V10</th>\n",
              "      <th>V12</th>\n",
              "      <th>V13</th>\n",
              "      <th>V14</th>\n",
              "      <th>V15</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.606965</td>\n",
              "      <td>0.256419</td>\n",
              "      <td>-1.298476</td>\n",
              "      <td>0.011016</td>\n",
              "      <td>-0.569351</td>\n",
              "      <td>-0.411453</td>\n",
              "      <td>-0.251940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.288529</td>\n",
              "      <td>-0.437895</td>\n",
              "      <td>-1.298476</td>\n",
              "      <td>-0.416127</td>\n",
              "      <td>-0.569351</td>\n",
              "      <td>-0.411453</td>\n",
              "      <td>-0.251940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.747384</td>\n",
              "      <td>-0.446762</td>\n",
              "      <td>-1.298476</td>\n",
              "      <td>-0.707361</td>\n",
              "      <td>-0.569351</td>\n",
              "      <td>-0.411453</td>\n",
              "      <td>-0.251940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.571051</td>\n",
              "      <td>0.047205</td>\n",
              "      <td>-1.298476</td>\n",
              "      <td>-0.645231</td>\n",
              "      <td>-0.569351</td>\n",
              "      <td>-0.411453</td>\n",
              "      <td>-0.251940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.747384</td>\n",
              "      <td>-0.447091</td>\n",
              "      <td>-1.298476</td>\n",
              "      <td>-0.233620</td>\n",
              "      <td>-0.569351</td>\n",
              "      <td>-0.411453</td>\n",
              "      <td>-0.251940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45206</th>\n",
              "      <td>0.947747</td>\n",
              "      <td>-0.176460</td>\n",
              "      <td>0.143418</td>\n",
              "      <td>2.791329</td>\n",
              "      <td>0.076230</td>\n",
              "      <td>-0.411453</td>\n",
              "      <td>-0.251940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45207</th>\n",
              "      <td>2.831227</td>\n",
              "      <td>0.120447</td>\n",
              "      <td>0.143418</td>\n",
              "      <td>0.768224</td>\n",
              "      <td>-0.246560</td>\n",
              "      <td>-0.411453</td>\n",
              "      <td>-0.251940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45208</th>\n",
              "      <td>2.925401</td>\n",
              "      <td>1.429593</td>\n",
              "      <td>0.143418</td>\n",
              "      <td>3.373797</td>\n",
              "      <td>0.721811</td>\n",
              "      <td>1.436189</td>\n",
              "      <td>1.050473</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45209</th>\n",
              "      <td>1.512791</td>\n",
              "      <td>-0.228024</td>\n",
              "      <td>0.143418</td>\n",
              "      <td>0.970146</td>\n",
              "      <td>0.399020</td>\n",
              "      <td>-0.411453</td>\n",
              "      <td>-0.251940</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45210</th>\n",
              "      <td>-0.370689</td>\n",
              "      <td>0.528364</td>\n",
              "      <td>0.143418</td>\n",
              "      <td>0.399328</td>\n",
              "      <td>-0.246560</td>\n",
              "      <td>1.476138</td>\n",
              "      <td>4.523577</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>45211 rows × 7 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b49737c5-1a8f-4474-81ab-3a359f994dc9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b49737c5-1a8f-4474-81ab-3a359f994dc9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b49737c5-1a8f-4474-81ab-3a359f994dc9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1d579568-3a4f-467a-afcb-51661080f9ac\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1d579568-3a4f-467a-afcb-51661080f9ac')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1d579568-3a4f-467a-afcb-51661080f9ac button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "scaled_data",
              "summary": "{\n  \"name\": \"scaled_data\",\n  \"rows\": 45211,\n  \"fields\": [\n    {\n      \"column\": \"V1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.000011059438955,\n        \"min\": -2.159994148794221,\n        \"max\": 5.09140213258684,\n        \"num_unique_values\": 77,\n        \"samples\": [\n          -0.5590365282295715,\n          -0.653210505909845,\n          1.1360950700153518\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"V6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.000011059438955,\n        \"min\": -3.0811485466035458,\n        \"max\": 33.09477575528038,\n        \"num_unique_values\": 7168,\n        \"samples\": [\n          0.6285373701776257,\n          -0.43329658900374024,\n          1.8526187700752286\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"V10\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.000011059438955,\n        \"min\": -1.7791078364526218,\n        \"max\": 1.8256284501384432,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          -1.7791078364526218,\n          1.3449969452596344,\n          0.14341818306261284\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"V12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.000011059438955,\n        \"min\": -1.0024778786007835,\n        \"max\": 18.094699808975527,\n        \"num_unique_values\": 1573,\n        \"samples\": [\n          2.2399262224822207,\n          3.4048618276617435,\n          5.734733038020789\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"V13\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000110594389549,\n        \"min\": -0.5693506376457914,\n        \"max\": 19.44364734433979,\n        \"num_unique_values\": 48,\n        \"samples\": [\n          12.34226096363523,\n          7.823196903186872,\n          19.44364734433979\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"V14\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.000011059438955,\n        \"min\": -0.4114531064930479,\n        \"max\": 8.297430992711057,\n        \"num_unique_values\": 559,\n        \"samples\": [\n          2.085359995342991,\n          5.101510222360926,\n          0.8669152016470042\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"V15\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.000011059438955,\n        \"min\": -0.25194037067217256,\n        \"max\": 119.13598229870267,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          7.128403939798272,\n          3.6553007348710045,\n          1.91874913240737\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# For categorical data, get dummy variables\n",
        "data_dummy = pd.get_dummies(data, drop_first = True)\n",
        "# drop the numerical columns\n",
        "data_dummy = data_dummy.drop(columns=column_numeric)\n",
        "data_dummy"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 461
        },
        "id": "CkhImP_86yRJ",
        "outputId": "e8631b5e-b213-4316-df0e-91af9349ff6b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       V2_blue-collar  V2_entrepreneur  V2_housemaid  V2_management  \\\n",
              "0                   0                0             0              1   \n",
              "1                   0                0             0              0   \n",
              "2                   0                1             0              0   \n",
              "3                   1                0             0              0   \n",
              "4                   0                0             0              0   \n",
              "...               ...              ...           ...            ...   \n",
              "45206               0                0             0              0   \n",
              "45207               0                0             0              0   \n",
              "45208               0                0             0              0   \n",
              "45209               1                0             0              0   \n",
              "45210               0                1             0              0   \n",
              "\n",
              "       V2_retired  V2_self-employed  V2_services  V2_student  V2_technician  \\\n",
              "0               0                 0            0           0              0   \n",
              "1               0                 0            0           0              1   \n",
              "2               0                 0            0           0              0   \n",
              "3               0                 0            0           0              0   \n",
              "4               0                 0            0           0              0   \n",
              "...           ...               ...          ...         ...            ...   \n",
              "45206           0                 0            0           0              1   \n",
              "45207           1                 0            0           0              0   \n",
              "45208           1                 0            0           0              0   \n",
              "45209           0                 0            0           0              0   \n",
              "45210           0                 0            0           0              0   \n",
              "\n",
              "       V2_unemployed  ...  V11_jul  V11_jun  V11_mar  V11_may  V11_nov  \\\n",
              "0                  0  ...        0        0        0        1        0   \n",
              "1                  0  ...        0        0        0        1        0   \n",
              "2                  0  ...        0        0        0        1        0   \n",
              "3                  0  ...        0        0        0        1        0   \n",
              "4                  0  ...        0        0        0        1        0   \n",
              "...              ...  ...      ...      ...      ...      ...      ...   \n",
              "45206              0  ...        0        0        0        0        1   \n",
              "45207              0  ...        0        0        0        0        1   \n",
              "45208              0  ...        0        0        0        0        1   \n",
              "45209              0  ...        0        0        0        0        1   \n",
              "45210              0  ...        0        0        0        0        1   \n",
              "\n",
              "       V11_oct  V11_sep  V16_other  V16_success  V16_unknown  \n",
              "0            0        0          0            0            1  \n",
              "1            0        0          0            0            1  \n",
              "2            0        0          0            0            1  \n",
              "3            0        0          0            0            1  \n",
              "4            0        0          0            0            1  \n",
              "...        ...      ...        ...          ...          ...  \n",
              "45206        0        0          0            0            1  \n",
              "45207        0        0          0            0            1  \n",
              "45208        0        0          0            1            0  \n",
              "45209        0        0          0            0            1  \n",
              "45210        0        0          1            0            0  \n",
              "\n",
              "[45211 rows x 35 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a000925b-d830-4992-8ddf-a59d62a0c49b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>V2_blue-collar</th>\n",
              "      <th>V2_entrepreneur</th>\n",
              "      <th>V2_housemaid</th>\n",
              "      <th>V2_management</th>\n",
              "      <th>V2_retired</th>\n",
              "      <th>V2_self-employed</th>\n",
              "      <th>V2_services</th>\n",
              "      <th>V2_student</th>\n",
              "      <th>V2_technician</th>\n",
              "      <th>V2_unemployed</th>\n",
              "      <th>...</th>\n",
              "      <th>V11_jul</th>\n",
              "      <th>V11_jun</th>\n",
              "      <th>V11_mar</th>\n",
              "      <th>V11_may</th>\n",
              "      <th>V11_nov</th>\n",
              "      <th>V11_oct</th>\n",
              "      <th>V11_sep</th>\n",
              "      <th>V16_other</th>\n",
              "      <th>V16_success</th>\n",
              "      <th>V16_unknown</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45206</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45207</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45208</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45209</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45210</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>45211 rows × 35 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a000925b-d830-4992-8ddf-a59d62a0c49b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a000925b-d830-4992-8ddf-a59d62a0c49b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a000925b-d830-4992-8ddf-a59d62a0c49b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-27ec19bc-4a35-4d63-9b48-50f12bb8df88\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-27ec19bc-4a35-4d63-9b48-50f12bb8df88')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-27ec19bc-4a35-4d63-9b48-50f12bb8df88 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data_dummy"
            }
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Combined scaled_data and data_dummy\n",
        "combined_data = pd.concat([scaled_data, data_dummy], axis = 1, sort = False)\n",
        "combined_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 461
        },
        "id": "Agl6-lmT71R8",
        "outputId": "597a1c5e-9206-4044-865d-614c64accf4e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             V1        V6       V10       V12       V13       V14       V15  \\\n",
              "0      1.606965  0.256419 -1.298476  0.011016 -0.569351 -0.411453 -0.251940   \n",
              "1      0.288529 -0.437895 -1.298476 -0.416127 -0.569351 -0.411453 -0.251940   \n",
              "2     -0.747384 -0.446762 -1.298476 -0.707361 -0.569351 -0.411453 -0.251940   \n",
              "3      0.571051  0.047205 -1.298476 -0.645231 -0.569351 -0.411453 -0.251940   \n",
              "4     -0.747384 -0.447091 -1.298476 -0.233620 -0.569351 -0.411453 -0.251940   \n",
              "...         ...       ...       ...       ...       ...       ...       ...   \n",
              "45206  0.947747 -0.176460  0.143418  2.791329  0.076230 -0.411453 -0.251940   \n",
              "45207  2.831227  0.120447  0.143418  0.768224 -0.246560 -0.411453 -0.251940   \n",
              "45208  2.925401  1.429593  0.143418  3.373797  0.721811  1.436189  1.050473   \n",
              "45209  1.512791 -0.228024  0.143418  0.970146  0.399020 -0.411453 -0.251940   \n",
              "45210 -0.370689  0.528364  0.143418  0.399328 -0.246560  1.476138  4.523577   \n",
              "\n",
              "       V2_blue-collar  V2_entrepreneur  V2_housemaid  ...  V11_jul  V11_jun  \\\n",
              "0                   0                0             0  ...        0        0   \n",
              "1                   0                0             0  ...        0        0   \n",
              "2                   0                1             0  ...        0        0   \n",
              "3                   1                0             0  ...        0        0   \n",
              "4                   0                0             0  ...        0        0   \n",
              "...               ...              ...           ...  ...      ...      ...   \n",
              "45206               0                0             0  ...        0        0   \n",
              "45207               0                0             0  ...        0        0   \n",
              "45208               0                0             0  ...        0        0   \n",
              "45209               1                0             0  ...        0        0   \n",
              "45210               0                1             0  ...        0        0   \n",
              "\n",
              "       V11_mar  V11_may  V11_nov  V11_oct  V11_sep  V16_other  V16_success  \\\n",
              "0            0        1        0        0        0          0            0   \n",
              "1            0        1        0        0        0          0            0   \n",
              "2            0        1        0        0        0          0            0   \n",
              "3            0        1        0        0        0          0            0   \n",
              "4            0        1        0        0        0          0            0   \n",
              "...        ...      ...      ...      ...      ...        ...          ...   \n",
              "45206        0        0        1        0        0          0            0   \n",
              "45207        0        0        1        0        0          0            0   \n",
              "45208        0        0        1        0        0          0            1   \n",
              "45209        0        0        1        0        0          0            0   \n",
              "45210        0        0        1        0        0          1            0   \n",
              "\n",
              "       V16_unknown  \n",
              "0                1  \n",
              "1                1  \n",
              "2                1  \n",
              "3                1  \n",
              "4                1  \n",
              "...            ...  \n",
              "45206            1  \n",
              "45207            1  \n",
              "45208            0  \n",
              "45209            1  \n",
              "45210            0  \n",
              "\n",
              "[45211 rows x 42 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5d266244-5c6a-48e1-8b93-a8e813f9f9e1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>V1</th>\n",
              "      <th>V6</th>\n",
              "      <th>V10</th>\n",
              "      <th>V12</th>\n",
              "      <th>V13</th>\n",
              "      <th>V14</th>\n",
              "      <th>V15</th>\n",
              "      <th>V2_blue-collar</th>\n",
              "      <th>V2_entrepreneur</th>\n",
              "      <th>V2_housemaid</th>\n",
              "      <th>...</th>\n",
              "      <th>V11_jul</th>\n",
              "      <th>V11_jun</th>\n",
              "      <th>V11_mar</th>\n",
              "      <th>V11_may</th>\n",
              "      <th>V11_nov</th>\n",
              "      <th>V11_oct</th>\n",
              "      <th>V11_sep</th>\n",
              "      <th>V16_other</th>\n",
              "      <th>V16_success</th>\n",
              "      <th>V16_unknown</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.606965</td>\n",
              "      <td>0.256419</td>\n",
              "      <td>-1.298476</td>\n",
              "      <td>0.011016</td>\n",
              "      <td>-0.569351</td>\n",
              "      <td>-0.411453</td>\n",
              "      <td>-0.251940</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.288529</td>\n",
              "      <td>-0.437895</td>\n",
              "      <td>-1.298476</td>\n",
              "      <td>-0.416127</td>\n",
              "      <td>-0.569351</td>\n",
              "      <td>-0.411453</td>\n",
              "      <td>-0.251940</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.747384</td>\n",
              "      <td>-0.446762</td>\n",
              "      <td>-1.298476</td>\n",
              "      <td>-0.707361</td>\n",
              "      <td>-0.569351</td>\n",
              "      <td>-0.411453</td>\n",
              "      <td>-0.251940</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.571051</td>\n",
              "      <td>0.047205</td>\n",
              "      <td>-1.298476</td>\n",
              "      <td>-0.645231</td>\n",
              "      <td>-0.569351</td>\n",
              "      <td>-0.411453</td>\n",
              "      <td>-0.251940</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.747384</td>\n",
              "      <td>-0.447091</td>\n",
              "      <td>-1.298476</td>\n",
              "      <td>-0.233620</td>\n",
              "      <td>-0.569351</td>\n",
              "      <td>-0.411453</td>\n",
              "      <td>-0.251940</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45206</th>\n",
              "      <td>0.947747</td>\n",
              "      <td>-0.176460</td>\n",
              "      <td>0.143418</td>\n",
              "      <td>2.791329</td>\n",
              "      <td>0.076230</td>\n",
              "      <td>-0.411453</td>\n",
              "      <td>-0.251940</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45207</th>\n",
              "      <td>2.831227</td>\n",
              "      <td>0.120447</td>\n",
              "      <td>0.143418</td>\n",
              "      <td>0.768224</td>\n",
              "      <td>-0.246560</td>\n",
              "      <td>-0.411453</td>\n",
              "      <td>-0.251940</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45208</th>\n",
              "      <td>2.925401</td>\n",
              "      <td>1.429593</td>\n",
              "      <td>0.143418</td>\n",
              "      <td>3.373797</td>\n",
              "      <td>0.721811</td>\n",
              "      <td>1.436189</td>\n",
              "      <td>1.050473</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45209</th>\n",
              "      <td>1.512791</td>\n",
              "      <td>-0.228024</td>\n",
              "      <td>0.143418</td>\n",
              "      <td>0.970146</td>\n",
              "      <td>0.399020</td>\n",
              "      <td>-0.411453</td>\n",
              "      <td>-0.251940</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45210</th>\n",
              "      <td>-0.370689</td>\n",
              "      <td>0.528364</td>\n",
              "      <td>0.143418</td>\n",
              "      <td>0.399328</td>\n",
              "      <td>-0.246560</td>\n",
              "      <td>1.476138</td>\n",
              "      <td>4.523577</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>45211 rows × 42 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5d266244-5c6a-48e1-8b93-a8e813f9f9e1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5d266244-5c6a-48e1-8b93-a8e813f9f9e1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5d266244-5c6a-48e1-8b93-a8e813f9f9e1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-66af9f3a-a4e6-4ca2-a97d-4b8f34744606\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-66af9f3a-a4e6-4ca2-a97d-4b8f34744606')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-66af9f3a-a4e6-4ca2-a97d-4b8f34744606 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "combined_data"
            }
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Program sklearn.model_selection.train_test_split() to partition the normalized data set into (train, validation, test) = (80%, 0%, 20%)\n",
        "from sklearn.model_selection import train_test_split\n",
        "data_train, data_test, target_train, target_test = train_test_split(combined_data, target, test_size = 0.2)\n",
        "# Double check the shape to ensure variables are assigned correctly.\n",
        "print(f'The shape of split datasets are as follow\\n\\\n",
        "- Features in training dataset: {data_train.shape}\\n\\\n",
        "- Features in testing dataset: {data_test.shape}\\n\\\n",
        "- Target in training dataset: {target_train.shape}\\n\\\n",
        "- Target in testing dataset: {target_test.shape}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dw5o28LArYDo",
        "outputId": "a6df1c24-8468-4643-d229-9da8b41307b0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The shape of split datasets are as follow\n",
            "- Features in training dataset: (36168, 42)\n",
            "- Features in testing dataset: (9043, 42)\n",
            "- Target in training dataset: (36168,)\n",
            "- Target in testing dataset: (9043,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Classification Model\n",
        "###### - Program a for-loop iterating number of neighbors from 1 to 18:\n",
        "* Fit sklearn.neighbors.KNeighborsClassifier() from train data\n",
        "* Predict and compute the error rate on the train target\n",
        "* Predict and compute the error rate on the test target"
      ],
      "metadata": {
        "id": "7ZfpmUnAs01j"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Program a for-loop iterating number of neighbors from 1 to 18:\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "\n",
        "# Prepare range of numbers of n_neighbors for the for-loop\n",
        "i_range = list(range(1, 19))\n",
        "# Prepare the empty lists for error rate of training data and testing data respectively\n",
        "error_rate_train_list = []\n",
        "error_rate_test_list = []\n",
        "\n",
        "# For-loop\n",
        "for i in i_range:\n",
        "  knn = KNeighborsClassifier(n_neighbors=i)\n",
        "  # Fit sklearn.neighbors.KNeighborsClassifier() from train data\n",
        "  knn.fit(data_train, target_train)\n",
        "  # Predict and compute the error rate on the train target\n",
        "  #pred = knn.predict(data_train)\n",
        "  acc_train = knn.score(data_train, target_train)\n",
        "  error_rate_train = 1 - acc_train\n",
        "  error_rate_train_list.append(error_rate_train)\n",
        "  # Predict and compute the error rate on the test target\n",
        "  acc_test = knn.score(data_test, target_test)\n",
        "  error_rate_test = 1 - acc_test\n",
        "  error_rate_test_list.append(error_rate_test)"
      ],
      "metadata": {
        "id": "o3HmZtZGs2n1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Program seaborn plot on two sets of error rates versus numbers of neighbors,\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Create a DataFrame to hold the error rates and number of neighbors\n",
        "error_df = pd.DataFrame({\n",
        "    'Number of Neighbors': i_range,\n",
        "    'Training Data': error_rate_train_list,\n",
        "    'Testing Data': error_rate_test_list})\n",
        "\n",
        "# Find the optimal n on the lowest error rate on the test target\n",
        "min_index = error_rate_test_list.index(min(error_rate_test_list))\n",
        "optimal_n = i_range[min_index]\n",
        "\n",
        "# Melt the DataFrame to have 'Number of Neighbors' as a shared x-axis and 'Training'/'Testing' as values\n",
        "melted_df = error_df.melt(id_vars='Number of Neighbors', var_name='Dataset', value_name='Error Rate')\n",
        "\n",
        "# Plot using seaborn\n",
        "plt.figure(figsize=(8, 4))\n",
        "sns.lineplot(data=melted_df, x='Number of Neighbors', y='Error Rate', hue='Dataset')\n",
        "plt.title('Error Rate vs. Number of Neighbors')\n",
        "plt.xlabel('Number of Neighbors')\n",
        "plt.ylabel('Error Rate')\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.xticks(range(1, 19))\n",
        "# Highlight the optimal count of neighbors on the lowest error rate on the test target\n",
        "plt.axvline(x=optimal_n, color='red', linestyle='--')\n",
        "plt.text(optimal_n + 0.1, 0.01, f'Optimal Neighbor Count = {optimal_n}', color='red', rotation=90, size = 8)\n",
        "plt.ylim(0, 0.14)\n",
        "plt.xlim(1, 18)\n",
        "plt.legend(loc = 'lower right')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "id": "JIdzCq0wIwCI",
        "outputId": "7c0b09b7-9e6c-44ae-841f-ae33b2921ef7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Build a prediction model using the above optimal count of neighbors\n",
        "knn = KNeighborsClassifier(n_neighbors=optimal_n)\n",
        "# Train the model again\n",
        "knn.fit(data_train, target_train)\n",
        "# Using the above model to do the predict the entire dataset\n",
        "pred = knn.predict(combined_data)"
      ],
      "metadata": {
        "id": "8qI2uFZUvPHL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Use seaborn or matplotlib plot to visualize the confusion matrix on the entire data set\n",
        "# Reference(move x-axis): https://stackoverflow.com/questions/71696157/move-ticks-and-labels-to-the-top-of-a-pyplot-figure\n",
        "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
        "\n",
        "# set fig, ax\n",
        "fig, ax = plt.subplots()\n",
        "\n",
        "# plot confusion matrix\n",
        "cm = confusion_matrix(target, pred)\n",
        "disp = ConfusionMatrixDisplay(cm)\n",
        "disp.plot(cmap = 'YlOrRd', ax=ax)\n",
        "\n",
        "# Move x-axis ticks to the top\n",
        "ax.xaxis.tick_top()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "Qss5LGJPz0Ad",
        "outputId": "e6297e86-c0a4-47de-a62c-c5321dcb8a18"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Use seaborn or matplotlib plot to visualize the ROC curve with baseline on the entire data set\n",
        "from sklearn.metrics import roc_curve\n",
        "from sklearn.metrics import roc_auc_score\n",
        "\n",
        "# Get the predicted probabilities\n",
        "y_pred_prob = knn.predict_proba(combined_data)[:,1]\n",
        "# Convert target labels to 0 and 1\n",
        "target_new = [1 if label == '2' else 0 for label in target]\n",
        "fpr, tpr, thresholds = roc_curve(target_new, y_pred_prob)\n",
        "\n",
        "# Plotting\n",
        "plt.plot([0, 1], [0, 1], 'k--', label = \"Baseline\") # 'k--' shows the line which represents \"baseline\", which also means random guessing line\n",
        "plt.plot(fpr, tpr, label=f'ROC Curve\\n(AUC = {roc_auc_score(target_new, y_pred_prob):.2f})', color = \"#e21833\")\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.title('ROC Curve')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "FvjQdB0OAwOw",
        "outputId": "f40cb4a0-b473-4670-e2d2-19a2333f45d0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Reference\n",
        "* [seaborn - EDA](https://seaborn.pydata.org/tutorial/relational.html)\n",
        "* [matplotlib - color](https://matplotlib.org/stable/users/explain/colors/colormaps.html)\n",
        "* Class material in BUDT704 last semester\n",
        "* [sklearn - ROC curve](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.roc_curve.html)"
      ],
      "metadata": {
        "id": "B3ua3QvHdnDX"
      }
    }
  ]
}